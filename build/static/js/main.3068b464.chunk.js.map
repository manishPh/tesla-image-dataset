{"version":3,"sources":["Filter.js","Image.js","ImageList.js","App.js","serviceWorker.js","index.js"],"names":["Filter","filter","labels","onFilterSelect","console","log","options","value","label","map","currentValue","find","option","className","defaultValue","onChange","isClearable","ImageList","image","imageName","top","left","width","height","parsedTop","parseInt","parsedLeft","labelStyleObj","position","highlightStyleObj","style","src","alt","title","images","Image","App","props","getLabels","s","Set","data","forEach","add","sort","getFilteredData","state","handleFilterSelect","selectedFilter","setState","this","filteredData","length","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3068b464.chunk.js","sourcesContent":["import React from 'react';\nimport Select from 'react-select';\n\nconst Filter = ({ filter, labels, onFilterSelect }) => {\n    console.log('filter val: ' + filter);\n    const options = [{ value: '', label: '-- No filter --' }, ...labels.map((label) => ({ value: label, label }))];\n    const currentValue = options.find((option) => option.value === filter);\n    return (\n        <div className='filter'>\n            <label>\n                Select Label to Filter by\n                <Select\n                    className='label-select'\n                    defaultValue={options[0]}\n                    value={currentValue}\n                    onChange={onFilterSelect}\n                    options={options}\n                    isClearable\n                />\n            </label>\n        </div>\n    );\n};\nexport default Filter;\n","import React from 'react';\n\nconst ImageList = ({ image }) => {\n    const { imageName, top, left, width, height, label } = image;\n    const parsedTop = parseInt(top, 10);\n    const parsedLeft = parseInt(left, 10);\n    const parsedWidth = parseInt(width, 10);\n    const parsedHeight = parseInt(height, 10);\n\n    const labelStyleObj = {\n        position: 'absolute',\n        top: parsedTop - 30,\n        left: parsedLeft,\n    };\n    const highlightStyleObj = {\n        position: 'absolute',\n        top: parsedTop,\n        left: parsedLeft,\n        width: parsedWidth,\n        height: parsedHeight,\n    };\n    return (\n        <div className='image'>\n            <div className='label' style={labelStyleObj}>\n                {label}\n            </div>\n            <div className='highlight' style={highlightStyleObj}></div>\n            <img src={`./images/${imageName}`} alt={imageName} title={imageName} />\n        </div>\n    );\n};\nexport default ImageList;\n","import React from 'react';\nimport Image from './Image';\n\nconst ImageList = ({ images }) => {\n    return (\n        <div className='image-list'>\n            {images.map((image) => (\n                <Image image={image} />\n            ))}\n        </div>\n    );\n};\nexport default ImageList;\n","import React from 'react';\nimport Filter from './Filter';\nimport ImageList from './ImageList';\nimport data from './data.json';\nimport './App.css';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data,\n            filter: '',\n            labels: this.getLabels(),\n        };\n    }\n\n    getLabels = () => {\n        const s = new Set();\n        data.forEach(({ label }) => s.add(label));\n        return [...s].sort();\n    };\n\n    getFilteredData = () => {\n        const { filter, data } = this.state;\n        if (filter === '') return data;\n\n        return data.filter(({ label }) => label === filter);\n    };\n\n    handleFilterSelect = (selectedFilter) => {\n        const filter = selectedFilter ? selectedFilter.value : '';\n        console.log({ filter });\n        this.setState({ filter });\n    };\n\n    render() {\n        const { labels, filter } = this.state;\n        const filteredData = this.getFilteredData();\n        console.log('filteredData length : ' + filteredData.length);\n\n        return (\n            <section className='main'>\n                <header>\n                    <h2>TESLA Self Driving Cars - Neural Net Model Data</h2>\n                </header>\n                <Filter filter={filter} labels={labels} onFilterSelect={this.handleFilterSelect} />\n                <ImageList images={filteredData} />\n            </section>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}